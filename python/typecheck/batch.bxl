# Copyright (c) Meta Platforms, Inc. and affiliates.
#
# This source code is licensed under both the MIT license found in the
# LICENSE-MIT file in the root directory of this source tree and the Apache
# License, Version 2.0 found in the LICENSE-APACHE file in the root directory
# of this source tree.

load("@prelude//utils:utils.bzl", "flatten")
load("@prelude//python/sourcedb/filter.bxl", "do_filter")

def _check_targets_sharded(ctx: bxl.Context, checked_targets: list[ConfiguredTargetLabel]) -> typing.Any:
    type_check_shard_labels = {
        label.configured_target(): target.providers()[DefaultInfo]
            .sub_targets["typecheck"][DefaultInfo]
            .sub_targets
        for label, target in ctx.analysis(checked_targets).items()
    }
    shard_sub_targets = [
        target.with_sub_target(["typecheck", shard])
        for target, shards in type_check_shard_labels.items()
        for shard in shards
    ]
    build_result = ctx.build(shard_sub_targets)
    build_output = ctx.output.ensure_multiple(build_result)

    output = {label.raw_target(): [] for label in build_output}
    for label, artifacts in build_output.items():
        output[label.raw_target()] += [artifact.rel_path() for artifact in artifacts]

    return output

def _check_targets_batched(ctx: bxl.Context, checked_targets: list[ConfiguredTargetLabel]) -> typing.Any:
    build_result = ctx.build(
        [target.with_sub_target("typecheck") for target in checked_targets],
    )
    output = ctx.output.ensure_multiple(build_result)

    return {
        label.raw_target(): [artifact.rel_path() for artifact in artifacts]
        for label, artifacts in output.items()
    }

def do_ptt_filter(ctx: bxl.Context, targets: list[TargetLabel]) -> list[ConfiguredTargetLabel]:
    configured_targets = ctx.analysis(
        ctx.configured_targets(
            do_filter(ctx.uquery(), targets, exclude_targets_with_special_labels = False),
        ),
    )

    return [
        label.configured_target()
        for label, target in configured_targets.items()
        if "typecheck" in target.providers()[DefaultInfo].sub_targets
    ]

def check_targets(ctx: bxl.Context, targets: list[TargetLabel], enable_sharding: bool) -> None:
    checked_targets = do_ptt_filter(ctx, targets)

    if enable_sharding:
        artifacts = _check_targets_sharded(ctx, checked_targets)
    else:
        artifacts = _check_targets_batched(ctx, checked_targets)

    ctx.output.print_json(
        {
            "artifacts": artifacts,
            "root": ctx.root(),
        },
    )

def _run_entry_point(ctx: bxl.Context) -> None:
    targets = flatten(ctx.cli_args.target)
    check_targets(ctx, targets, ctx.cli_args.enable_sharding)

run = bxl_main(
    doc = "Run [typecheck] on a set of targets or target patterns.",
    impl = _run_entry_point,
    cli_args = {
        "enable-sharding": cli_args.bool(
            default = False,
            doc = "Shard type checking within each target",
        ),
        "target": cli_args.list(
            cli_args.target_expr(
                doc = "Target pattern to run type checking on",
            ),
        ),
    },
)
